// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  avatar    String?
  cover     String?
  bio       String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tweets    Tweet[]
  likes     Like[]
}

model Tweet {
  id               Int      @id @default(autoincrement())
  content          String
  // Array 를 JSON.Stringify, parse 직렬화/역직렬화 하여 사용 
  // sqilte 에서 String[] 지원 X => Json 가능.
  // Prisma 에서 Json 지원 X
  // model Photo 를 만드는 것도 가능하나, 이번에는 String 으로 처리
  photos           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  parentTweet      Tweet?   @relation("TweetInTweet", fields: [parentTweetId], references: [id], onDelete: Cascade)
  parentTweetId    Int?
  replies          Tweet[]  @relation("TweetInTweet")
  inReplyToTweet   Tweet?   @relation("TweetToTweet", fields: [inReplyToTweetId], references: [id], onDelete: Cascade)
  inReplyToTweetId Int?
  inReplies        Tweet[]  @relation("TweetToTweet")
  likes            Like[]
}

model Like {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId  Int
  tweetId Int

  @@id(name: "id", [userId, tweetId])
}
